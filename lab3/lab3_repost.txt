第一题：
  1.请描述页目录项(Pag	Director	Entry)和页表(Page	Table	Entry)中组成部分对ucore实现页替换算法的潜在用处
    在页表目录和也表中尾部的标示位表示当前目录的状态，1表示正常，并页目录的前20位表示二级页地址的前20位，如果是0表示缺页，同时前20位表示缺页的扇区号。
  2.如果ucore的缺页服务例程在执行过程中访问内存,出现了页访问异常,请问硬件要做哪些事情?
		CPU保存当前的PC,EIP,error code,并且把这些信息入栈，并保存现场。之后把中断号（0xE)对应的缺页服务例程地址保存到CS和EIP中，之后处理中断，最后恢复现场。
第二题：
  如果要在ucore上实现"extended clock页替换算法"请给你的设计方案,现有的swap_manager框架是否足以支持在ucore
	中实现此算法?如果是,请给你的设计方案。如果不是,请给出你的新的扩展和基此扩展的设计方案。并需要回答如下
	问题：
		需要被换出的页的特征是什么?
		在ucore中如何判断具有这样特征的页?
		何时进行换入和换出操作?
		
	可以支持实现算法。
	原来算法的clock的访问为是A，如果一些页被访问并没有被修改，这些页就不会被写入到内存中，如果在page中添加一个标志位表示是否被修改，就可以通过以下的算法来找到替换页：
	首先对整个队列每一个元素都询问一次，如果A=0表示未访问，B=0表示未修改，并立即替换。如果没有找到，则寻找A=0,b=1，同样如果找到立即替换，并且之后把所有的A标准表示为0.
	如果以上都失败了，就返回指针开始的地方，重复之前的步骤。
	
列出你认为本实验中重要的知识点，以及与对应的OS原理中的知识点。
		使用虚拟内存，通过合理的分配物理地址，扩大逻辑地址
		访问的局部性原理
		缺页的处理机制
列出你认为OS原理中重要的知识点，但在实验中没有对应上
		LRU，全局置换算法
